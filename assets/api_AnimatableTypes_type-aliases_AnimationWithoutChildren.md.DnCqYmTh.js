import{_ as a,o as s,c as t,ag as n}from"./chunks/framework.4dSU8SgQ.js";const o=JSON.parse('{"title":"AnimationWithoutChildren<Animating>","description":"","frontmatter":{},"headers":[],"relativePath":"api/AnimatableTypes/type-aliases/AnimationWithoutChildren.md","filePath":"api/AnimatableTypes/type-aliases/AnimationWithoutChildren.md"}'),e={name:"api/AnimatableTypes/type-aliases/AnimationWithoutChildren.md"};function h(l,i,p,k,r,d){return s(),t("div",null,i[0]||(i[0]=[n('<p><a href="./../../">aninest-root</a> / <a href="./../">AnimatableTypes</a> / AnimationWithoutChildren</p><h1 id="animationwithoutchildren-animating" tabindex="-1">AnimationWithoutChildren&lt;Animating&gt; <a class="header-anchor" href="#animationwithoutchildren-animating" aria-label="Permalink to &quot;AnimationWithoutChildren\\&lt;Animating\\&gt;&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes classy-light classy-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">type</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> AnimationWithoutChildren</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Animating</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&gt; </span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">=</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;"> object </span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">&amp;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> Listeners</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">AnimatableEventsWithValue</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, </span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Partial</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">SlicedAnimatable</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Animating</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&gt;&gt;&gt; </span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">&amp;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> Listeners</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;</span><span style="--shiki-light:#846905;--shiki-dark:#FFD140;">&quot;update&quot;</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, </span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">unknown</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&gt; </span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">&amp;</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;"> { [</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">key</span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;"> in</span><span style="--shiki-light:#846905;--shiki-dark:#FFD140;"> `recursive${</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Capitalize</span><span style="--shiki-light:#846905;--shiki-dark:#FFD140;">&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">AnimatableEventsWithValue</span><span style="--shiki-light:#846905;--shiki-dark:#FFD140;">&gt;</span><span style="--shiki-light:#846905;--shiki-dark:#FFD140;">}Listeners`</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">]</span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">:</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> ListenerSet</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">unknown</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&gt; };</span></span></code></pre></div><p>Defined in: <a href="https://github.com/zphrs/aninest/blob/310077e630d6ee37eacb9031d0d4959aae280204/core/src/Animate/AnimatableTypes.ts#L116" target="_blank" rel="noreferrer">Animate/AnimatableTypes.ts:116</a></p><p>The local animation object. This is a recursive type, meaning that it can contain other animations.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><h3 id="animating" tabindex="-1">Animating <a class="header-anchor" href="#animating" aria-label="Permalink to &quot;Animating&quot;">​</a></h3><p><code>Animating</code> <em>extends</em> <a href="./UnknownAnimatable.html"><code>UnknownAnimatable</code></a></p>',8)]))}const A=a(e,[["render",h]]);export{o as __pageData,A as default};
