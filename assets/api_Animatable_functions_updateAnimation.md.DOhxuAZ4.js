import{_ as e,o as t,c as i,S as n}from"./chunks/framework.BoA4oRLI.js";const c=JSON.parse('{"title":"updateAnimation()","description":"","frontmatter":{},"headers":[],"relativePath":"api/Animatable/functions/updateAnimation.md","filePath":"api/Animatable/functions/updateAnimation.md"}'),s={name:"api/Animatable/functions/updateAnimation.md"};function o(r,a,p,l,h,d){return t(),i("div",null,a[0]||(a[0]=[n('<p><a href="./../../">aninest-root</a> / <a href="./../">Animatable</a> / updateAnimation</p><h1 id="updateanimation" tabindex="-1">updateAnimation() <a class="header-anchor" href="#updateanimation" aria-label="Permalink to &quot;updateAnimation()&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes classy-light classy-dark vp-code"><code><span class="line"><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">function</span><span style="--shiki-light:#345348;--shiki-dark:#D9FFE8;"> updateAnimation</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Animating</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&gt;(</span><span style="--shiki-light:#2D27A4;--shiki-dark:#CFD3FF;">anim</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, </span><span style="--shiki-light:#2D27A4;--shiki-dark:#CFD3FF;">dt</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">)</span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">:</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> boolean</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">;</span></span></code></pre></div><p>Defined in: <a href="https://github.com/zphrs/aninest/blob/d15fc4e13610c8d581ef6e02e86e0f6d2661eb01/core/src/Animate/Animatable.ts#L427" target="_blank" rel="noreferrer">Animate/Animatable.ts:427</a></p><p>Moves the animation forward by a certain amount of time.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><h3 id="animating" tabindex="-1">Animating <a class="header-anchor" href="#animating" aria-label="Permalink to &quot;Animating&quot;">​</a></h3><p><code>Animating</code> <em>extends</em> <a href="./../../AnimatableTypes/type-aliases/Animatable.html"><code>Animatable</code></a>&lt;<code>unknown</code>&gt;</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="anim" tabindex="-1">anim <a class="header-anchor" href="#anim" aria-label="Permalink to &quot;anim&quot;">​</a></h3><p><a href="./../../AnimatableTypes/type-aliases/Animation.html"><code>Animation</code></a>&lt;<code>Animating</code>&gt;</p><p>The animation object</p><h3 id="dt" tabindex="-1">dt <a class="header-anchor" href="#dt" aria-label="Permalink to &quot;dt&quot;">​</a></h3><p><code>number</code></p><p>The timestep to increment the animation by. Must be positive. If negative or zero and the interpolation function is not NO_INTERP then no-op.</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>boolean</code></p><p>true if the animation needs to be updated again</p>',18)]))}const k=e(s,[["render",o]]);export{c as __pageData,k as default};
