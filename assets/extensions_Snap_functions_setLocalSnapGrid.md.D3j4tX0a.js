import{_ as e,o as i,c as s,ag as t}from"./chunks/framework.4dSU8SgQ.js";const k=JSON.parse('{"title":"setLocalSnapGrid()","description":"","frontmatter":{},"headers":[],"relativePath":"extensions/Snap/functions/setLocalSnapGrid.md","filePath":"extensions/Snap/functions/setLocalSnapGrid.md"}'),n={name:"extensions/Snap/functions/setLocalSnapGrid.md"};function r(o,a,l,d,p,h){return i(),s("div",null,a[0]||(a[0]=[t('<p><a href="./../../">Documentation</a> / <a href="./../">Snap</a> / setLocalSnapGrid</p><h1 id="setlocalsnapgrid" tabindex="-1">setLocalSnapGrid() <a class="header-anchor" href="#setlocalsnapgrid" aria-label="Permalink to &quot;setLocalSnapGrid()&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes classy-light classy-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">function</span><span style="--shiki-light:#345348;--shiki-dark:#D9FFE8;"> setLocalSnapGrid</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Animating</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&gt;(</span><span style="--shiki-light:#2D27A4;--shiki-dark:#CFD3FF;">anim</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, </span><span style="--shiki-light:#2D27A4;--shiki-dark:#CFD3FF;">gridSize</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">)</span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">:</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> unsubscribe</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">;</span></span></code></pre></div><p>Defined in: <a href="https://github.com/zphrs/aninest/blob/a363ca71fdc4d7663cf000c3eff7b2cf0db5b46a/extensions/src/snap.ts#L80" target="_blank" rel="noreferrer">../../extensions/src/snap.ts:80</a></p><p>Sets a snap grid only for the top level of the animation.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><h3 id="animating" tabindex="-1">Animating <a class="header-anchor" href="#animating" aria-label="Permalink to &quot;Animating&quot;">​</a></h3><p><code>Animating</code> <em>extends</em> <code>Animatable</code>&lt;<code>unknown</code>&gt;</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="anim" tabindex="-1">anim <a class="header-anchor" href="#anim" aria-label="Permalink to &quot;anim&quot;">​</a></h3><p><code>Animation</code>&lt;<code>Animating</code>&gt;</p><h3 id="gridsize" tabindex="-1">gridSize <a class="header-anchor" href="#gridsize" aria-label="Permalink to &quot;gridSize&quot;">​</a></h3><p><code>Partial</code>&lt;<code>SlicedAnimatable</code>&lt;<code>Animating</code>&gt;&gt;</p><p>A dictionary of the size of each grid square for each variable. Ex: <code>{x: 1, y: 1}</code></p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>unsubscribe</code></p><p>a function to remove the snap grid</p>',17)]))}const m=e(n,[["render",r]]);export{k as __pageData,m as default};
