import{_ as a,o as t,c as i,ag as s}from"./chunks/framework.4dSU8SgQ.js";const g=JSON.parse('{"title":"getUpdateLayer()","description":"","frontmatter":{},"headers":[],"relativePath":"extensions/Update/functions/getUpdateLayer.md","filePath":"extensions/Update/functions/getUpdateLayer.md"}'),n={name:"extensions/Update/functions/getUpdateLayer.md"};function r(d,e,p,o,l,h){return t(),i("div",null,e[0]||(e[0]=[s('<p><a href="./../../">Documentation</a> / <a href="./../">Update</a> / getUpdateLayer</p><h1 id="getupdatelayer" tabindex="-1">getUpdateLayer() <a class="header-anchor" href="#getupdatelayer" aria-label="Permalink to &quot;getUpdateLayer()&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes classy-light classy-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">function</span><span style="--shiki-light:#345348;--shiki-dark:#D9FFE8;"> getUpdateLayer</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Animating</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&gt;(</span><span style="--shiki-light:#2D27A4;--shiki-dark:#CFD3FF;">queueNextUpdate</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">)</span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">:</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> UpdateLayer</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Animating</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&gt;;</span></span></code></pre></div><p>Defined in: <a href="https://github.com/zphrs/aninest/blob/4a450bb8f30d4d7c2e1683078a9b2dbac45b7966/extensions/src/update.ts#L130" target="_blank" rel="noreferrer">../../extensions/src/update.ts:130</a></p><p>Updates the animation every frame, providing a subscribe function which allows listening to:</p><ul><li><strong>start</strong> - when the animation starts to be updated,</li><li><strong>done</strong> - when the animation finishes animating everything</li><li><strong>update</strong> - each update frame</li></ul><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><h3 id="animating" tabindex="-1">Animating <a class="header-anchor" href="#animating" aria-label="Permalink to &quot;Animating&quot;">​</a></h3><p><code>Animating</code> <em>extends</em> <code>Animatable</code>&lt;<code>unknown</code>&gt;</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="queuenextupdate" tabindex="-1">queueNextUpdate <a class="header-anchor" href="#queuenextupdate" aria-label="Permalink to &quot;queueNextUpdate&quot;">​</a></h3><p>(<code>callback</code>) =&gt; <code>void</code></p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><a href="./../type-aliases/UpdateLayer.html"><code>UpdateLayer</code></a>&lt;<code>Animating</code>&gt;</p>',14)]))}const u=a(n,[["render",r]]);export{g as __pageData,u as default};
