import{_ as a,o as s,c as t,S as i}from"./chunks/framework.BoA4oRLI.js";const k=JSON.parse('{"title":"lerp()","description":"","frontmatter":{},"headers":[],"relativePath":"api/Vec2/functions/lerp.md","filePath":"api/Vec2/functions/lerp.md"}'),n={name:"api/Vec2/functions/lerp.md"};function r(p,e,l,o,h,c){return s(),t("div",null,e[0]||(e[0]=[i(`<p><a href="./../../">aninest-root</a> / <a href="./../">Vec2</a> / lerp</p><h1 id="lerp" tabindex="-1">lerp() <a class="header-anchor" href="#lerp" aria-label="Permalink to &quot;lerp()&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes classy-light classy-dark vp-code"><code><span class="line"><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">function</span><span style="--shiki-light:#345348;--shiki-dark:#D9FFE8;"> lerp</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">(</span></span>
<span class="line"><span style="--shiki-light:#2D27A4;--shiki-dark:#CFD3FF;">   v1</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, </span></span>
<span class="line"><span style="--shiki-light:#2D27A4;--shiki-dark:#CFD3FF;">   v2</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, </span></span>
<span class="line"><span style="--shiki-light:#2D27A4;--shiki-dark:#CFD3FF;">   time</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">)</span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">:</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> Vec2</span></span></code></pre></div><p>Performs a linear interpolation between two vectors by a time value.</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><p>• <strong>v1</strong>: <a href="./../type-aliases/Vec2.html"><code>Vec2</code></a></p><p>The start vector.</p><p>• <strong>v2</strong>: <a href="./../type-aliases/Vec2.html"><code>Vec2</code></a></p><p>The end vector.</p><p>• <strong>time</strong>: <code>number</code></p><p>The time value to interpolate by (should be between 0 and 1).</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><a href="./../type-aliases/Vec2.html"><code>Vec2</code></a></p><p>A new vector.</p><h2 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h2><p><a href="https://github.com/zphrs/aninest/blob/6f2a20a565f78d1858f4407b2e35ae4791d4a036/core/src/Utils/vec2.ts#L224" target="_blank" rel="noreferrer">Utils/vec2.ts:224</a></p>`,16)]))}const f=a(n,[["render",r]]);export{k as __pageData,f as default};
