import{_ as a,o as i,c as e,ag as t}from"./chunks/framework.4dSU8SgQ.js";const c=JSON.parse('{"title":"Recursive<Base, Shape>","description":"","frontmatter":{},"headers":[],"relativePath":"api/RecursiveHelpers/type-aliases/Recursive.md","filePath":"api/RecursiveHelpers/type-aliases/Recursive.md"}'),h={name:"api/RecursiveHelpers/type-aliases/Recursive.md"};function p(r,s,l,n,k,d){return i(),e("div",null,s[0]||(s[0]=[t('<p><a href="./../../">aninest-root</a> / <a href="./../">RecursiveHelpers</a> / Recursive</p><h1 id="recursive-base-shape" tabindex="-1">Recursive&lt;Base, Shape&gt; <a class="header-anchor" href="#recursive-base-shape" aria-label="Permalink to &quot;Recursive\\&lt;Base, Shape\\&gt;&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes classy-light classy-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">type</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> Recursive</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Base</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, </span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Shape</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&gt; </span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">=</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;"> { [</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">P</span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;"> in</span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;"> keyof</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> Shape</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">]</span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">:</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> Shape</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">[</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">P</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">] </span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">extends</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> Base</span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;"> ?</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> Base</span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;"> :</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> Recursive</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Base</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, </span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Shape</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">[</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">P</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">]&gt; };</span></span></code></pre></div><p>Defined in: <a href="https://github.com/zphrs/aninest/blob/4a450bb8f30d4d7c2e1683078a9b2dbac45b7966/core/src/Animate/RecursiveHelpers.ts#L58" target="_blank" rel="noreferrer">Animate/RecursiveHelpers.ts:58</a></p><p>Generic type which allows for the recursive definition of an object which either has a value of type <code>Base</code> or a subtree of the same type.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><h3 id="base" tabindex="-1">Base <a class="header-anchor" href="#base" aria-label="Permalink to &quot;Base&quot;">​</a></h3><p><code>Base</code></p><h3 id="shape" tabindex="-1">Shape <a class="header-anchor" href="#shape" aria-label="Permalink to &quot;Shape&quot;">​</a></h3><p><code>Shape</code></p>',10)]))}const o=a(h,[["render",p]]);export{c as __pageData,o as default};
