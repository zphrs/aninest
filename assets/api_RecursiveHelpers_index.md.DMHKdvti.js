import{_ as t,o as a,c as r,S as s}from"./chunks/framework.BoA4oRLI.js";const u=JSON.parse('{"title":"RecursiveHelpers","description":"","frontmatter":{},"headers":[],"relativePath":"api/RecursiveHelpers/index.md","filePath":"api/RecursiveHelpers/index.md"}'),i={name:"api/RecursiveHelpers/index.md"};function o(l,e,n,d,c,h){return a(),r("div",null,e[0]||(e[0]=[s('<p><a href="./../">aninest-root</a> / RecursiveHelpers</p><h1 id="recursivehelpers" tabindex="-1">RecursiveHelpers <a class="header-anchor" href="#recursivehelpers" aria-label="Permalink to &quot;RecursiveHelpers&quot;">​</a></h1><p>Provides general helper functions for working with recursive objects. Especially useful for allowing extensions to mask out (not affect) certain children of an object.</p><h2 id="index" tabindex="-1">Index <a class="header-anchor" href="#index" aria-label="Permalink to &quot;Index&quot;">​</a></h2><h3 id="type-aliases" tabindex="-1">Type Aliases <a class="header-anchor" href="#type-aliases" aria-label="Permalink to &quot;Type Aliases&quot;">​</a></h3><table><thead><tr><th>Type alias</th><th>Description</th></tr></thead><tbody><tr><td><a href="./type-aliases/Mask.html">Mask</a></td><td>Mask over animation. Set any key to <code>false</code> in order to mask out that key and that key&#39;s subtree.</td></tr><tr><td><a href="./type-aliases/PartialRecursive.html">PartialRecursive</a></td><td>Contains the same structure as the original object, but with all keys being optional.</td></tr><tr><td><a href="./type-aliases/Recursive.html">Recursive</a></td><td>Generic type which allows for the recursive definition of an object which either has a value of type <code>Base</code> or a subtree of the same type.</td></tr></tbody></table>',6)]))}const f=t(i,[["render",o]]);export{u as __pageData,f as default};
