import{_ as e,o as i,c as t,ag as s}from"./chunks/framework.4dSU8SgQ.js";const E=JSON.parse('{"title":"AnimatableListener<Animating, Event>","description":"","frontmatter":{},"headers":[],"relativePath":"api/AnimatableEvents/type-aliases/AnimatableListener.md","filePath":"api/AnimatableEvents/type-aliases/AnimatableListener.md"}'),n={name:"api/AnimatableEvents/type-aliases/AnimatableListener.md"};function l(h,a,r,p,k,d){return i(),t("div",null,a[0]||(a[0]=[s('<p><a href="./../../">aninest-root</a> / <a href="./../">AnimatableEvents</a> / AnimatableListener</p><h1 id="animatablelistener-animating-event" tabindex="-1">AnimatableListener&lt;Animating, Event&gt; <a class="header-anchor" href="#animatablelistener-animating-event" aria-label="Permalink to &quot;AnimatableListener\\&lt;Animating, Event\\&gt;&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes classy-light classy-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">type</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> AnimatableListener</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Animating</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, </span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Event</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&gt; </span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">=</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> Event</span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;"> extends</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> AnimatableEventsWithValue</span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;"> ?</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> Listener</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Partial</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">SlicedAnimatable</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Animating</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&gt;&gt;&gt; </span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">:</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> Listener</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;undefined&gt;;</span></span></code></pre></div><p>Defined in: <a href="https://github.com/zphrs/aninest/blob/a363ca71fdc4d7663cf000c3eff7b2cf0db5b46a/core/src/Animate/AnimatableEvents.ts#L239" target="_blank" rel="noreferrer">Animate/AnimatableEvents.ts:239</a></p><p>Listens to the animation for a specific event. All events aside from <code>update</code> return a dictionary of local values which are currently being animated.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><h3 id="animating" tabindex="-1">Animating <a class="header-anchor" href="#animating" aria-label="Permalink to &quot;Animating&quot;">​</a></h3><p><code>Animating</code> <em>extends</em> <a href="./../../AnimatableTypes/type-aliases/UnknownAnimatable.html"><code>UnknownAnimatable</code></a></p><h3 id="event" tabindex="-1">Event <a class="header-anchor" href="#event" aria-label="Permalink to &quot;Event&quot;">​</a></h3><p><code>Event</code> <em>extends</em> <a href="./AnimatableEvents.html"><code>AnimatableEvents</code></a></p>',10)]))}const m=e(n,[["render",l]]);export{E as __pageData,m as default};
