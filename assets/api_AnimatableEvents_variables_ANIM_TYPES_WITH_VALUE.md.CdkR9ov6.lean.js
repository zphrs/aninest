import{_ as i,o as s,c as t,S as e}from"./chunks/framework.BoA4oRLI.js";const E=JSON.parse('{"title":"ANIM_TYPES_WITH_VALUE","description":"","frontmatter":{},"headers":[],"relativePath":"api/AnimatableEvents/variables/ANIM_TYPES_WITH_VALUE.md","filePath":"api/AnimatableEvents/variables/ANIM_TYPES_WITH_VALUE.md"}'),n={name:"api/AnimatableEvents/variables/ANIM_TYPES_WITH_VALUE.md"};function h(l,a,r,p,o,k){return s(),t("div",null,a[0]||(a[0]=[e('<p><a href="./../../">aninest-root</a> / <a href="./../">AnimatableEvents</a> / ANIM_TYPES_WITH_VALUE</p><h1 id="anim-types-with-value" tabindex="-1">ANIM_TYPES_WITH_VALUE <a class="header-anchor" href="#anim-types-with-value" aria-label="Permalink to &quot;ANIM\\_TYPES\\_WITH\\_VALUE&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes classy-light classy-dark vp-code"><code><span class="line"><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">const</span><span style="--shiki-light:#2D27A4;--shiki-dark:#CFD3FF;"> ANIM_TYPES_WITH_VALUE</span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">:</span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;"> readonly</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;"> [</span><span style="--shiki-light:#846905;--shiki-dark:#FFD140;">&quot;beforeStart&quot;</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, </span><span style="--shiki-light:#846905;--shiki-dark:#FFD140;">&quot;immutableStart&quot;</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, </span><span style="--shiki-light:#846905;--shiki-dark:#FFD140;">&quot;start&quot;</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, </span><span style="--shiki-light:#846905;--shiki-dark:#FFD140;">&quot;end&quot;</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, </span><span style="--shiki-light:#846905;--shiki-dark:#FFD140;">&quot;interrupt&quot;</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, </span><span style="--shiki-light:#846905;--shiki-dark:#FFD140;">&quot;beforeEnd&quot;</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">];</span></span></code></pre></div><p>List of event types which provide the values which the animation is interpolating to (or in the case of <code>end</code> the final values).</p><h2 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h2><p><a href="https://github.com/zphrs/aninest/blob/3ccad2bd2e27401982aa1c47d163019f555722e6/core/src/Animate/AnimatableEvents.ts#L69" target="_blank" rel="noreferrer">Animate/AnimatableEvents.ts:69</a></p>',6)]))}const c=i(n,[["render",h]]);export{E as __pageData,c as default};
