import{_ as e,o as n,c as t,ag as i}from"./chunks/framework.4dSU8SgQ.js";const c=JSON.parse('{"title":"mountExtension()","description":"","frontmatter":{},"headers":[],"relativePath":"api/Extension/functions/mountExtension.md","filePath":"api/Extension/functions/mountExtension.md"}'),s={name:"api/Extension/functions/mountExtension.md"};function o(r,a,h,l,p,d){return n(),t("div",null,a[0]||(a[0]=[i('<p><a href="./../../">aninest-root</a> / <a href="./../">Extension</a> / mountExtension</p><h1 id="mountextension" tabindex="-1">mountExtension() <a class="header-anchor" href="#mountextension" aria-label="Permalink to &quot;mountExtension()&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes classy-light classy-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">function</span><span style="--shiki-light:#345348;--shiki-dark:#D9FFE8;"> mountExtension</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Animating</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&gt;(</span><span style="--shiki-light:#2D27A4;--shiki-dark:#CFD3FF;">extension</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, </span><span style="--shiki-light:#2D27A4;--shiki-dark:#CFD3FF;">anim</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">)</span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">:</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> unsubscribe</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">;</span></span></code></pre></div><p>Defined in: <a href="https://github.com/zphrs/aninest/blob/310077e630d6ee37eacb9031d0d4959aae280204/core/src/Animate/Extension.ts#L33" target="_blank" rel="noreferrer">Animate/Extension.ts:33</a></p><p>A function that mounts an extension to the animation.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><h3 id="animating" tabindex="-1">Animating <a class="header-anchor" href="#animating" aria-label="Permalink to &quot;Animating&quot;">​</a></h3><p><code>Animating</code> <em>extends</em> <a href="./../../AnimatableTypes/type-aliases/Animatable.html"><code>Animatable</code></a>&lt;<code>unknown</code>&gt;</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="extension" tabindex="-1">extension <a class="header-anchor" href="#extension" aria-label="Permalink to &quot;extension&quot;">​</a></h3><p><a href="./../type-aliases/Extension.html"><code>Extension</code></a>&lt;<code>Animating</code>&gt;</p><h3 id="anim" tabindex="-1">anim <a class="header-anchor" href="#anim" aria-label="Permalink to &quot;anim&quot;">​</a></h3><p><a href="./../../AnimatableTypes/type-aliases/Animation.html"><code>Animation</code></a>&lt;<code>Animating</code>&gt;</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><a href="./../../AnimatableTypes/type-aliases/unsubscribe.html"><code>unsubscribe</code></a></p><p>A function that unmounts an extension from the animation.</p>',16)]))}const u=e(s,[["render",o]]);export{c as __pageData,u as default};
