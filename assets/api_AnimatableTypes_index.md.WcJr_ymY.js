import{_ as a,o as e,c as i,ag as n}from"./chunks/framework.4dSU8SgQ.js";const c=JSON.parse('{"title":"AnimatableTypes","description":"","frontmatter":{},"headers":[],"relativePath":"api/AnimatableTypes/index.md","filePath":"api/AnimatableTypes/index.md"}'),l={name:"api/AnimatableTypes/index.md"};function s(o,t,r,h,d,m){return e(),i("div",null,t[0]||(t[0]=[n('<p><a href="./../">aninest-root</a> / AnimatableTypes</p><h1 id="animatabletypes" tabindex="-1">AnimatableTypes <a class="header-anchor" href="#animatabletypes" aria-label="Permalink to &quot;AnimatableTypes&quot;">​</a></h1><p>A collection of types to support Animatable.</p><h2 id="type-aliases" tabindex="-1">Type Aliases <a class="header-anchor" href="#type-aliases" aria-label="Permalink to &quot;Type Aliases&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Type Alias</th><th>Description</th></tr></thead><tbody><tr><td><a href="./type-aliases/AnimatableOf.html">AnimatableOf</a></td><td>Lets you get the <a href="./type-aliases/Animatable.html">Animatable</a> type out of the <a href="./type-aliases/Animation.html">Animation</a> type.</td></tr><tr><td><a href="./type-aliases/AnimationWithoutChildren.html">AnimationWithoutChildren</a></td><td>The local animation object. This is a recursive type, meaning that it can contain other animations.</td></tr><tr><td><a href="./type-aliases/UnknownAnimatable.html">UnknownAnimatable</a></td><td>Convenient way to write <a href="./type-aliases/Animatable.html">`Animatable&lt;unknown&gt;`</a>, usually used to extend a generic type.</td></tr><tr><td><a href="./type-aliases/UnknownAnimation.html">UnknownAnimation</a></td><td>Convenient way to write <code>Animation&lt;UnknownRecursiveAnimatable&gt;</code>. Usually used to cast an animation to this more generic type.</td></tr><tr><td><a href="./type-aliases/unsubscribe.html">unsubscribe</a></td><td>Generic unsubscribe function which will remove event listeners.</td></tr></tbody></table><h2 id="construction" tabindex="-1">Construction <a class="header-anchor" href="#construction" aria-label="Permalink to &quot;Construction&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Type Alias</th><th>Description</th></tr></thead><tbody><tr><td><a href="./type-aliases/Animation.html">Animation</a></td><td>The animation object. This is a recursive type, meaning that it can contain other animations.</td></tr></tbody></table><h2 id="state-types" tabindex="-1">State Types <a class="header-anchor" href="#state-types" aria-label="Permalink to &quot;State Types&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Type Alias</th><th>Description</th></tr></thead><tbody><tr><td><a href="./type-aliases/Animatable.html">Animatable</a></td><td>The generic type of the animation state.</td></tr><tr><td><a href="./type-aliases/LocalAnimatable.html">LocalAnimatable</a></td><td>The local state of the animation, meaning only the numbers in the topmost level of the animation.</td></tr><tr><td><a href="./type-aliases/PartialRecursiveAnimatable.html">PartialRecursiveAnimatable</a></td><td>A subtree of the Animatable type.</td></tr><tr><td><a href="./type-aliases/SlicedAnimatable.html">SlicedAnimatable</a></td><td>A local slice of the Animatable type.</td></tr></tbody></table>',9)]))}const b=a(l,[["render",s]]);export{c as __pageData,b as default};
