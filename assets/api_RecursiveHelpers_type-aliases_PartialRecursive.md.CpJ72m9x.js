import{_ as a,o as s,c as i,S as t}from"./chunks/framework.BoA4oRLI.js";const k=JSON.parse('{"title":"PartialRecursive<Base, Shape>","description":"","frontmatter":{},"headers":[],"relativePath":"api/RecursiveHelpers/type-aliases/PartialRecursive.md","filePath":"api/RecursiveHelpers/type-aliases/PartialRecursive.md"}'),r={name:"api/RecursiveHelpers/type-aliases/PartialRecursive.md"};function p(l,e,n,h,o,c){return s(),i("div",null,e[0]||(e[0]=[t('<p><a href="./../../">aninest-root</a> / <a href="./../">RecursiveHelpers</a> / PartialRecursive</p><h1 id="partialrecursive-base-shape" tabindex="-1">PartialRecursive&lt;Base, Shape&gt; <a class="header-anchor" href="#partialrecursive-base-shape" aria-label="Permalink to &quot;PartialRecursive\\&lt;Base, Shape\\&gt;&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes classy-light classy-dark vp-code"><code><span class="line"><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">type</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> PartialRecursive</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Base</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, </span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Shape</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&gt;: { [P in keyof Shape]?: Shape[P] extends Base ? Shape[P] : PartialRecursive&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Base</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, </span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">Shape</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">[</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">P</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">]&gt; };</span></span></code></pre></div><p>Contains the same structure as the original object, but with all keys being optional.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>Base</strong></p><p>• <strong>Shape</strong></p><h2 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h2><p><a href="https://github.com/zphrs/aninest/blob/6f2a20a565f78d1858f4407b2e35ae4791d4a036/core/src/Animate/RecursiveHelpers.ts#L68" target="_blank" rel="noreferrer">Animate/RecursiveHelpers.ts:68</a></p>',9)]))}const u=a(r,[["render",p]]);export{k as __pageData,u as default};
