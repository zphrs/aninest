import{_ as i,o as a,c as e,S as t}from"./chunks/framework.BoA4oRLI.js";const o=JSON.parse('{"title":"Mask<T>","description":"","frontmatter":{},"headers":[],"relativePath":"api/RecursiveHelpers/type-aliases/Mask.md","filePath":"api/RecursiveHelpers/type-aliases/Mask.md"}'),h={name:"api/RecursiveHelpers/type-aliases/Mask.md"};function l(k,s,n,p,r,d){return a(),e("div",null,s[0]||(s[0]=[t(`<p><a href="./../../">aninest-root</a> / <a href="./../">RecursiveHelpers</a> / Mask</p><h1 id="mask-t" tabindex="-1">Mask&lt;T&gt; <a class="header-anchor" href="#mask-t" aria-label="Permalink to &quot;Mask\\&lt;T\\&gt;&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes classy-light classy-dark vp-code"><code><span class="line"><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">type</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> Mask</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">T</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&gt; </span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">=</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;"> { [</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">P</span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;"> in</span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;"> keyof</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> T</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">]</span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">:</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> T</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">[</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;">P</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">] </span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">|</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> boolean</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;"> };</span></span></code></pre></div><p>Defined in: <a href="https://github.com/zphrs/aninest/blob/d15fc4e13610c8d581ef6e02e86e0f6d2661eb01/core/src/Animate/RecursiveHelpers.ts#L85" target="_blank" rel="noreferrer">Animate/RecursiveHelpers.ts:85</a></p><p>Mask over animation. Set any key to <code>false</code> in order to mask out that key and that key&#39;s subtree.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><h3 id="t" tabindex="-1">T <a class="header-anchor" href="#t" aria-label="Permalink to &quot;T&quot;">​</a></h3><p><code>T</code></p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes classy-light classy-dark vp-code"><code><span class="line"><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">const</span><span style="--shiki-light:#2D27A4;--shiki-dark:#CFD3FF;"> init</span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;"> =</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;"> {a: {x: </span><span style="--shiki-light:#413900;--shiki-dark:#CE9409;">0</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, y: </span><span style="--shiki-light:#413900;--shiki-dark:#CE9409;">0</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">}, b: {x: </span><span style="--shiki-light:#413900;--shiki-dark:#CE9409;">0</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, y: </span><span style="--shiki-light:#413900;--shiki-dark:#CE9409;">0</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">}}</span></span>
<span class="line"><span style="--shiki-light:#6E9D87;--shiki-dark:#6E9D87;">// will only include {b: {x: number}} after the mask is applied</span></span>
<span class="line"><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">const</span><span style="--shiki-light:#2D27A4;--shiki-dark:#CFD3FF;"> mask</span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">:</span><span style="--shiki-light:#645CEE;--shiki-dark:#A8A9F4;"> Mask</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&lt;</span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">typeof</span><span style="--shiki-light:#2D27A4;--shiki-dark:#CFD3FF;"> init</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">&gt; </span><span style="--shiki-light:#CE9409;--shiki-dark:#FFF4BA;">=</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;"> {a: </span><span style="--shiki-light:#413900;--shiki-dark:#CE9409;">false</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">, b: {x: </span><span style="--shiki-light:#413900;--shiki-dark:#CE9409;">false</span><span style="--shiki-light:#313233;--shiki-dark:#E9EAE4;">}}</span></span></code></pre></div>`,10)]))}const y=i(h,[["render",l]]);export{o as __pageData,y as default};
